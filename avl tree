#include<stdio.h>
#include<stdlib.h>
struct node 
{
  
int key;
   
struct node *left, *right;
   
int height;
 
};

 
int max (int a, int b);

int
height (struct node *N) 
{
  
if (N == NULL)
    
return 0;
  
return N->height;

}


int
max (int a, int b) 
{
  
return (a > b) ? a : b;

}


struct node *
newNode (int key) 
{
  
struct node *temp = (struct node *) malloc (sizeof (struct node));
  
temp->key = key;
  
temp->left = NULL;
  
temp->right = NULL;
  
temp->height = 1;
  
return (temp);

}


struct node *
rightRotate (struct node *y) 
{
  
struct node *x = y->left;
  
struct node *T2 = x->right;
  
x->right = y;
  
y->left = T2;
  
y->height = max (height (y->left), 
height (y->right)) + 1;
  
x->height = max (height (x->left), 
height (x->right)) + 1;
  
return x;

}


struct node *
leftRotate (struct node *x) 
{
  
struct node *y = x->right;
  
struct node *T2 = y->left;
  
y->left = x;
  
x->right = T2;
  
x->height = max (height (x->left), 
 
height (x->right)) + 1;
  
 
y->height = max (height (y->left), 
height (y->right)) + 1;
  
return y;

}


int
getBalance (struct node *N) 
{
  
if (N == NULL)
    
return 0;
  
return height (N->left);
  
height (N->right);

}


struct node *
insert (struct node *temp, int key) 
{
  if (temp == NULL)
    
return (newNode (key));
  
if (key < temp->key)
    
temp->left = insert (temp->left, key);
  
  else if (key > temp->key)
    
temp->right = insert (temp->right, key);
  
  else
    
return temp;
  
temp->height = 1 + max (height (temp->left), 
height (temp->right));
  
 
int balance = getBalance (temp);
  
if (balance > 1 && key < temp->left->key)
    
return rightRotate (temp);
  
if (balance < -1 && key > temp->right->key)
    
return leftRotate (temp);
  
if (balance > 1 && key > temp->left->key)
    
    {
      temp->left = leftRotate (temp->left);
      
return rightRotate (temp);
    
}
  
if (balance < -1 && key < temp->right->key)
    
    {
      
temp->right = rightRotate (temp->right);
      
return leftRotate (temp);
    
}
  
return temp;

}


 
struct node *
minValueNode (struct node *temp) 
{
  
struct node *current = temp;
  
while (current->left != NULL)
    
current = current->left;
  
return current;

}


struct node *
deleteNode (struct node *root, int key) 
{
  
if (root == NULL)
    
return root;
  
if (key < root->key)
    
root->left = deleteNode (root->left, key);
  
  else if (key > root->key)
    
root->right = deleteNode (root->right, key);
  
  else
    
    {
      if ((root->left == NULL) || 
(root->right == NULL))
	
	{
	  struct node *temp = root->left ? 
root->left : 
root->right;
	  
if (temp == NULL)
	    
	    {
	      temp = root;
	      
root = NULL;
	    
}
	  
	  else
	    
*root = *temp;
	
}
      
      else
	
	{
	  struct node *temp = minValueNode (root->right);
	  
root->key = temp->key;
	  
root->right = deleteNode (root->right, 
temp->key);
  
} 
} 
if (root == NULL)
    
return root;
  
root->height = 1 + max (height (root->left), 
height (root->right));
  
int balance = getBalance (root);
  
 
 
if (balance > 1 && 
getBalance (root->left) >= 0)
    
return rightRotate (root);
  
 
if (balance > 1 && 
getBalance (root->left) < 0)
    
    {
      
root->left = leftRotate (root->left);
      
return rightRotate (root);
    
}
  
if (balance < -1 && 
getBalance (root->right) <= 0)
    
return leftRotate (root);
  
if (balance < -1 && 
getBalance (root->right) > 0)
    
    {
      
root->right = rightRotate (root->right);
      
return leftRotate (root);
    
}
  
return root;

}


void
preOrder (struct node *root) 
{
  
if (root != NULL)
    
    {
      
printf ("%d ", root->key);
      
preOrder (root->left);
      
preOrder (root->right);
    }
}


 
int
main () 
{
  
struct node *root = NULL;
  
root = insert (root, 4);
  
root = insert (root, 5);
  
root = insert (root, 144);
  
root = insert (root, 5);
  
root = insert (root, 6);
  
root = insert (root, 45);
  
root = insert (root, -45);
  
root = insert (root, 31);
  
root = insert (root, 72);
  
printf ("Preorder traversal of the constructed AVL tree is \n");
  
preOrder (root);
  
root = deleteNode (root, 144);
  
root = deleteNode (root, -45);
  
printf ("\nPreorder traversal after deletion of given node \n");
  
preOrder (root);
  
return 0;

}


